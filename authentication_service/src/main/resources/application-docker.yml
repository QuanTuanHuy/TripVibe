server:
  port: 8081
  servlet:
    context-path: /authentication_service

spring:
  application:
    name: authentication_service

  datasource:
    username: ${DB_USER:root}
    password: ${DB_PASSWORD:root}
    url: jdbc:mysql://${DB_HOST:host.docker.internal}:${DB_PORT:3306}/authentication_service?createDatabaseIfNotExist=true
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
      dialect: org.hibernate.dialect.MySQLDialect
    show-sql: true
    database-platform: org.hibernate.dialect.MySQLDialect
  data:
    redis:
      host: ${REDIS_HOST:host.docker.internal}
      port: ${REDIS_PORT:6379}
  kafka:
    bootstrap-servers: ${KAFKA_HOST:host.docker.internal}:${KAFKA_PORT:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
app:
  services:
    notification_service:
      url: ${NOTIFICATION_SERVICE_HOST:host.docker.internal}:${NOTIFICATION_SERVICE_HOST:8082}/notification_service/
  kafka:
    default-server: ${KAFKA_HOST:host.docker.internal}:${KAFKA_PORT:9092}
  security:
    jwt:
      secret: MnAYFOKwxBOznHpxA3Wx4cJjeC3vYNtwzI6HRYT9SD++1BM9Pk32pTGETroljFsS
      expiration: 86400000
      access-token-expiration: 900000
      refresh-token-expiration: 604800000
      header: Authorization
      prefix: Bearer
    filter:
      publicUrls:
        - first: /api/public/v1/users
          second: POST
        - first: /api/public/v1/auth/login
          second: POST
        - first: /api/public/v1/auth/refresh
          second: POST
        - first: /api/public/v1/users/otp/verify
          second: POST
      protectedUrls: