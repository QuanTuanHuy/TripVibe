server:
  port: 8083

spring:
  application:
    name: inventory-service
    # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/inventory_db
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  
  # Initialize database with data.sql
  sql:
    init:
      mode: always
      platform: postgresql
  
  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000
    # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: inventory-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.booking.inventory.dto"

# Application specific configuration
app:
  kafka:
    topic:
      booking-events: booking-events
      accommodation-events: accommodation-events
    consumer:
      group-id: inventory-service

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

# OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
