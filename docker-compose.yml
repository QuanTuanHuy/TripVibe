services:
  api_gateway:
    build:
      context: ./api_gateway
    container_name: api_gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE=http://service_registry:8761/eureka/
      - SPRING_ZIPKIN_BASE-URL=http://zipkin:9411
    depends_on:
      - service_registry
      - authentication_service
    networks:
      - booking_network

  service_registry:
    image: springcloud/eureka
    container_name: service_registry
    ports:
      - "8761:8761"
    networks:
      - booking_network

  authentication_service:
    build:
      context: ./authentication_service
    container_name: authentication_service
    ports:
      - "8001:8080"
    depends_on:
      - mysql
      - redis
      - broker
      - service_registry
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE=http://service_registry:8761/eureka/
    networks:
      - booking_network
      
  mysql:
    image: mysql:8.0.38
    container_name: db_booking
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3309:3306"
    volumes:
      - db:/var/lib/mysql
    networks:
      - booking_network

  redis:
    image: redis:7.2.4-alpine
    container_name: redis_booking
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    networks:
      - booking_network

  booking_postgre_db:
    image: postgres:latest
    container_name: booking_postgre_db
    environment:
      POSTGRES_USER: user_booking
      POSTGRES_PASSWORD: secret
    ports:
      - "5433:5432"
    volumes:
      - postgres:/data/postgres
    networks:
      - booking_network

  broker:
    image: 'bitnami/kafka:3.7.0'
    container_name: booking_kafka
    hostname: kafka
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  elastic:
    image: elasticsearch:8.16.1
    container_name: booking_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - booking_network
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - booking_network

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - booking_network

  zipkin:
    image: openzipkin/zipkin:2.23
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - booking_network

volumes:
  db:
    driver: local
  postgres:
  es-data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  booking_network:
    driver: bridge